import logging
import random
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, executor, types

from tasks import TASKS  # tasks = [{'text': '...', 'level': 'easy'}, ...]

API_TOKEN = '7470253170:AAHX7NqY3L3H4pdCXVeDPsMXPvz8DM0_L70'  # üîÅ –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}
active_games = {}
assigned_tasks = set()

# –¢–∞–π–º–µ—Ä–∏ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (user_id: deadline)
reminder_tasks = {}

def get_remaining_tasks():
    return len([t for t in TASKS if t['text'] not in assigned_tasks])

def get_task_duration(level: str) -> timedelta:
    if level == 'easy':
        return timedelta(days=1)
    elif level == 'medium':
        return timedelta(days=3)
    elif level in ('hard', 'bonus'):
        return timedelta(days=7)
    else:
        return timedelta(days=1)  # –¥–µ—Ñ–æ–ª—Ç

async def send_deadline_reminder(user_id):
    user = users.get(user_id)
    if user and user.get('current_task'):
        task = user['current_task']
        deadline = task['deadline']
        now = datetime.now()
        if deadline > now:
            time_left = deadline - now
            await bot.send_message(user_id,
                f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ó–∞–≤–¥–∞–Ω–Ω—è \"{task['text']}\" –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ {deadline.strftime('%Y-%m-%d %H:%M:%S')}.\n"
                f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É: {time_left}.")
        else:
            # –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –∑–Ω—ñ–º–∞—î–º–æ 1 –±–∞–ª —ñ —Å–∫–∏–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            user['score'] = max(user['score'] - 1, 0)
            user['current_task'] = None
            assigned_tasks.discard(task['text'])
            await bot.send_message(user_id,
                f"‚ö†Ô∏è –¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è \"{task['text']}\" –º–∏–Ω—É–≤. –¢–æ–±—ñ –∑–Ω—è—Ç–æ 1 –±–∞–ª.\n"
                f"–ó–∞—Ä–∞–∑ —É —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è. –ü–æ–ø—Ä–æ—Å–∏ –Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥–æ—é /task.")

@dp.message_handler(commands=['start', 'register'])
async def register(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {
            'name': message.from_user.first_name,
            'score': 0,
            'current_task': None,
            'skips': 0,
            'partner': None,
            'accepted_tasks': [],
        }
        await message.answer(
            f"–í—ñ—Ç–∞—é, {message.from_user.first_name}! –¢–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É –≥—Ä—ñ ‚ù§Ô∏è\n"
            f"–¢–≤—ñ–π Telegram ID: `{user_id}`\n"
            "–ü–µ—Ä–µ–¥–∞–π —Ü–µ–π ID –ø–∞—Ä—Ç–Ω–µ—Ä—É, —â–æ–± –≤—ñ–Ω –∑–∞–ø—Ä–æ—Å–∏–≤ —Ç–µ–±–µ –¥–æ –≥—Ä–∏:\n"
            "`/invite <—Ç–≤—ñ–π_ID>`",
            parse_mode="Markdown"
        )
    else:
        await message.answer("–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –≥—Ä—ñ.")

@dp.message_handler(commands=['invite'])
async def invite_partner(message: types.Message):
    inviter_id = message.from_user.id
    args = message.get_args()
    if not args.isdigit():
        await message.answer("–í–≤–µ–¥–∏ ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /invite 123456789")
        return

    partner_id = int(args)
    if partner_id not in users:
        await message.answer("–¶–µ–π ID –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
        return

    if users[inviter_id]['partner'] or users[partner_id]['partner']:
        await message.answer("–û–¥–∏–Ω —ñ–∑ –≥—Ä–∞–≤—Ü—ñ–≤ –≤–∂–µ –º–∞—î –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
        return

    users[inviter_id]['partner'] = partner_id
    users[partner_id]['partner'] = inviter_id
    active_games[frozenset([inviter_id, partner_id])] = True
    await message.answer("–ì—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ü–æ—á–Ω—ñ—Ç—å –≥—Ä—É –∫–æ–º–∞–Ω–¥–æ—é /task")

    try:
        await bot.send_message(partner_id, f"{users[inviter_id]['name']} –∑–∞–ø—Ä–æ—Å–∏–≤ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –ü–æ—á–Ω—ñ—Ç—å –≥—Ä—É –∫–æ–º–∞–Ω–¥–æ—é /task.")
    except Exception:
        pass

@dp.message_handler(commands=['task'])
async def send_task(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user or not user['partner']:
        await message.answer("–¢–∏ –Ω–µ –≤ –ø–∞—Ä—ñ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è /register –∞–±–æ –∑–∞–ø—Ä–æ—Å–∏ /invite <ID>")
        return

    if user['current_task']:
        await message.answer("–£ —Ç–µ–±–µ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    available_tasks = [t for t in TASKS if t['text'] not in assigned_tasks]
    if not available_tasks:
        await message.answer("–£—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ üéâ")
        return

    task = random.choice(available_tasks)
    assigned_tasks.add(task['text'])

    duration = get_task_duration(task['level'])
    deadline = datetime.now() + duration

    user['current_task'] = {'text': task['text'], 'deadline': deadline, 'level': task['level']}
    reminder_tasks[user_id] = deadline - timedelta(hours=12)  # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 12 –≥–æ–¥–∏–Ω –¥–æ –¥–µ–¥–ª–∞–π–Ω—É

    await message.answer(
        f"üìù –ó–∞–≤–¥–∞–Ω–Ω—è:\n{task['text']}\n"
        f"‚è∞ –¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {duration.days} –¥–Ω—ñ–≤\n\n"
        "‚úÖ /accept ‚Äî –ø—Ä–∏–π–Ω—è—Ç–∏\n‚ùå /skip ‚Äî –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å"
    )

    partner_id = user['partner']
    try:
        await bot.send_message(partner_id, f"{user['name']} –æ—Ç—Ä–∏–º–∞–≤ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {task['text']}")
    except Exception:
        pass

@dp.message_handler(commands=['accept'])
async def accept_task(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user or not user['current_task']:
        await message.answer("–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    task_text = user['current_task']['text']
    user['accepted_tasks'].append(user['current_task'])
    user['current_task'] = None
    user['skips'] = 0
    user['score'] += 1  # –∞–±–æ —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤

    reminder_tasks.pop(user_id, None)

    await message.answer(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ: {task_text}")

    partner_id = user['partner']
    if partner_id:
        await bot.send_message(partner_id, f"{user['name']} –ø—Ä–∏–π–Ω—è–≤ –∑–∞–≤–¥–∞–Ω–Ω—è: {task_text}")

@dp.message_handler(commands=['skip'])
async def skip_task(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user or not user['current_task']:
        await message.answer("–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É.")
        return

    user['skips'] += 1
    text = user['current_task']['text']
    user['current_task'] = None
    assigned_tasks.discard(text)

    reminder_tasks.pop(user_id, None)

    if user['skips'] >= 3:
        user['score'] -= 1
        user['skips'] = 0
        await message.answer("‚ùå 3 –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ–¥—Ä—è–¥. -1 –±–∞–ª.")
    else:
        await message.answer(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {text}")

@dp.message_handler(commands=['extend'])
async def extend_task(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user or not user.get('current_task'):
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
        return

    # –î–æ–¥–∞—î–º–æ 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω—É
    user['current_task']['deadline'] += timedelta(days=1)

    # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    reminder_tasks[user_id] = user['current_task']['deadline'] - timedelta(hours=12)

    await message.answer(f"‚è≥ –¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –Ω–∞ 1 –¥–µ–Ω—å.\n–ù–æ–≤–∏–π –¥–µ–¥–ª–∞–π–Ω: {user['current_task']['deadline'].strftime('%Y-%m-%d %H:%M:%S')}")

@dp.message_handler(commands=['score'])
async def show_score(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user:
        await message.answer("–¢–∏ —â–µ –Ω–µ –≤ –≥—Ä—ñ.")
        return

    partner = users.get(user.get('partner'))
    msg = f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {user['score']} –±–∞–ª—ñ–≤"
    if partner:
        msg += f"\n–†–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ({partner['name']}): {partner['score']} –±–∞–ª—ñ–≤"

    await message.answer(msg)

@dp.message_handler(commands=['status'])
async def task_status(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)

    if not user:
        await message.answer("–¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
        return

    msg = f"üìä –ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑–∞–≤–¥–∞–Ω—å: {get_remaining_tasks()}"
    if user['current_task']:
        deadline = user['current_task']['deadline']
        time_left = deadline - datetime.now()
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        msg += (f"\nüïì –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è: {user['current_task']['text']}\n"
                f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left} –¥–Ω—ñ–≤ —ñ {hours_left} –≥–æ–¥–∏–Ω")
    else:
        msg += "\n–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è."

    await message.answer(msg)

async def check_reminders():
    while True:
        now = datetime.now()
        to_remove = []
        for user_id, remind_time in reminder_tasks.items():
            if now >= remind_time:
                await send_deadline_reminder(user_id)
                to_remove.append(user_id)
        for user_id in to_remove:
            reminder_tasks.pop(user_id, None)
        await asyncio.sleep(3600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É

if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(check_reminders())
    executor.start_polling(dp, skip_updates=True)
