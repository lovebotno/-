import logging
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from tasks import tasks  # –≤–∞—à —Ñ–∞–π–ª –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏

API_TOKEN = '7470253170:AAHX7NqY3L3H4pdCXVeDPsMXPvz8DM0_L70'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_states = {}

points_map = {
    "easy": 1,
    "medium": 2,
    "hard": 3,
    "bonus": 5
}

def get_deadline_by_level(level: str) -> datetime:
    now = datetime.now()
    if level == "hard":
        return now + timedelta(days=7)  # 7 –¥–Ω—ñ–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    else:
        return now + timedelta(hours=24)  # 24 –≥–æ–¥–∏–Ω–∏ –¥–ª—è —ñ–Ω—à–∏—Ö

def get_new_task(user_id):
    used = user_states[user_id]["used"]
    # –í–∏–±–∏—Ä–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤–∏–ø–∞–¥–∫–æ–≤–æ
    level = random.choice(list(tasks.keys()))
    available = [t for t in tasks[level] if t not in used and t not in user_states[user_id]["completed_by_any"]]
    if not available:
        for lvl in tasks.keys():
            available = [t for t in tasks[lvl] if t not in used and t not in user_states[user_id]["completed_by_any"]]
            if available:
                level = lvl
                break
    if not available:
        return None, None
    task = random.choice(available)
    return task, level

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {
        "score": 0,
        "used": set(),
        "skips": 0,
        "proposed_task": None,
        "proposed_level": None,
        "proposed_deadline": None,
        "completed_by_any": set()
    }
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    kb.add(KeyboardButton("–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫"))
    kb.add(KeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö"))
    kb.add(KeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É"))
    kb.add(KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ"))
    await message.answer("–í—ñ—Ç–∞—é –≤ Sex Bingo! –ù–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è', —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.", reply_markup=kb)

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ /start")
        return

    text = message.text.lower()

    state = user_states[user_id]

    if text == "–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è":
        task, level = get_new_task(user_id)
        if task is None:
            await message.answer("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ! –í—ñ—Ç–∞—î–º–æ üéâ")
            return
        deadline = get_deadline_by_level(level)
        state["proposed_task"] = task
        state["proposed_level"] = level
        state["proposed_deadline"] = deadline
        deadline_str = deadline.strftime("%d-%m-%Y %H:%M")
        await message.answer(
            f"–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è ({level} —Ä—ñ–≤–µ–Ω—å, {points_map[level]} –±–∞–ª—ñ–≤):\n\n{task}\n\n"
            f"–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –¥–æ {deadline_str}\n\n"
            "–Ø–∫—â–æ –≥–æ—Ç–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ '–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'. –Ø–∫—â–æ –Ω—ñ ‚Äî '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'."
        )

    elif text == "–ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
        if state["proposed_task"] is None:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞–π –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è'.")
            return
        # –ü—Ä–∏–π–Ω—è–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –¥–æ–¥–∞—î–º–æ —É used, —Å—Ç–∞–≤–∏–º–æ –ø–æ—Ç–æ—á–Ω–µ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        task = state["proposed_task"]
        level = state["proposed_level"]
        state["used"].add(task)
        state["current_task"] = task
        state["current_level"] = level
        state["current_deadline"] = state["proposed_deadline"]
        state["proposed_task"] = None
        state["proposed_level"] = None
        state["proposed_deadline"] = None
        state["skips"] = 0
        await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –í–∏–∫–æ–Ω–∞–π –π–æ–≥–æ –¥–æ {state['current_deadline'].strftime('%d-%m-%Y %H:%M')}. –ö–æ–ª–∏ –≤–∏–∫–æ–Ω–∞—î—à ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ '–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ'.")

    elif text == "–∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ":
        if "current_task" not in state or state["current_task"] is None:
            await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏–π–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
            return
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ
        now = datetime.now()
        deadline = state.get("current_deadline")
        if deadline and now > deadline:
            await message.answer("–ù–∞ –∂–∞–ª—å, —Ç–∏ –Ω–µ –≤—Å—Ç–∏–≥ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—á–∞—Å–Ω–æ. –ë–∞–ª—ñ–≤ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")
            # –û—á–∏—â–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –Ω–µ –¥–∞—î–º–æ –±–∞–ª–∏
            state["current_task"] = None
            state["current_level"] = None
            state["current_deadline"] = None
            return
        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏
        level = state["current_level"]
        points = points_map.get(level, 1)
        state["score"] += points
        # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å, —â–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –±—É–¥—å-–∫–∏–º (—â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª–∏)
        state["completed_by_any"].add(state["current_task"])
        # –û—á–∏—â–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        state["current_task"] = None
        state["current_level"] = None
        state["current_deadline"] = None
        await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! +{points} –±–∞–ª—ñ–≤.\n–ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {state['score']} –±–∞–ª—ñ–≤.")

    elif text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        state["skips"] += 1
        if state["skips"] > 2:
            state["score"] -= 1
            state["skips"] = 0
            # –Ø–∫—â–æ –±—É–ª–æ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
            if "current_task" in state:
                state["current_task"] = None
                state["current_level"] = None
                state["current_deadline"] = None
            await message.answer("–¢—Ä–µ—Ç—ñ–π –ø—Ä–æ–ø—É—Å–∫ –ø—ñ–¥—Ä—è–¥ ‚Äî –º—ñ–Ω—É—Å 1 –±–∞–ª.")
        else:
            await message.answer(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –±–µ–∑ —à—Ç—Ä–∞—Ñ—É ({state['skips']} –ø—Ä–æ–ø—É—Å–∫–∏).")
        # –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫—É –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        state["proposed_task"] = None
        state["proposed_level"] = None
        state["proposed_deadline"] = None

    elif text == "–º—ñ–π —Ä–∞—Ö—É–Ω–æ–∫":
        await message.answer(f"–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {state['score']} –±–∞–ª—ñ–≤")

    elif text == "—Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö":
        done = state["completed_by_any"]
        if not done:
            await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        else:
            await message.answer("–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n" + "\n".join(done))

    elif text == "–∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É":
        await message.answer(f"–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–≤—ñ–π –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {state['score']} –±–∞–ª—ñ–≤.\n–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –≤–≤–µ–¥–∏ /start")
        del user_states[user_id]

    else:
        await message.answer("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –∞–±–æ –≤–≤–µ–¥–∏ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
