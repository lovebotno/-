import logging
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from tasks import tasks  # –ú–∞—î –±—É—Ç–∏ —Ñ–∞–π–ª tasks.py –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏

API_TOKEN = '7470253170:AAHX7NqY3L3H4pdCXVeDPsMXPvz8DM0_L70'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: score, used tasks, skips, current_task, current_level
user_states = {}

# –ë–∞–ª–∏ –∑–∞ —Ä—ñ–≤–µ–Ω—å
points_map = {
    "easy": 1,
    "medium": 2,
    "hard": 3,
    "bonus": 5
}

def get_new_task(user_id):
    used = user_states[user_id]["used"]
    # –í–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ä–∞–Ω–¥–æ–º–Ω–æ
    level = random.choice(list(tasks.keys()))
    available = [t for t in tasks[level] if t not in used]
    if not available:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è - —à—É–∫–∞—î–º–æ –≤ —ñ–Ω—à–∏—Ö —Ä—ñ–≤–Ω—è—Ö
        for lvl in tasks.keys():
            available = [t for t in tasks[lvl] if t not in used]
            if available:
                level = lvl
                break
    if not available:
        return None, None  # –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ
    task = random.choice(available)
    return task, level

def task_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data="accept_task"),
        InlineKeyboardButton("–í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å", callback_data="decline_task")
    )
    return keyboard

def active_task_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ", callback_data="complete_task"),
        InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_task")
    )
    return keyboard

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {
        "score": 0,
        "used": set(),
        "skips": 0,
        "current_task": None,
        "current_level": None,
        "task_accepted": False
    }
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫"))
    kb.add(KeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö"))
    kb.add(KeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É"))
    await message.answer("–í—ñ—Ç–∞—é –≤ Sex Bingo! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è', —â–æ–± –ø–æ—á–∞—Ç–∏.", reply_markup=kb)

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ /start")
        return

    text = message.text.lower()

    if text == "–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è":
        if user_states[user_id]["task_accepted"]:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è!")
            return

        task, level = get_new_task(user_id)
        if task is None:
            await message.answer("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ! –í—ñ—Ç–∞—î–º–æ üéâ")
            return
        user_states[user_id]["current_task"] = task
        user_states[user_id]["current_level"] = level
        user_states[user_id]["task_accepted"] = False

        await message.answer(
            f"–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ({level} —Ä—ñ–≤–µ–Ω—å, {points_map[level]} –±–∞–ª—ñ–≤):\n\n{task}",
            reply_markup=task_keyboard()
        )

    elif text == "–º—ñ–π —Ä–∞—Ö—É–Ω–æ–∫":
        score = user_states[user_id]["score"]
        await message.answer(f"–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤")

    elif text == "—Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö":
        done = user_states[user_id]["used"]
        if not done:
            await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        else:
            await message.answer("–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n" + "\n".join(done))

    elif text == "–∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É":
        score = user_states[user_id]["score"]
        await message.answer(f"–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–≤—ñ–π –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤.\n–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –≤–≤–µ–¥–∏ /start")
        del user_states[user_id]

    else:
        await message.answer("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –∞–±–æ –≤–≤–µ–¥–∏ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

@dp.callback_query_handler(lambda c: c.data in ["accept_task", "decline_task", "complete_task", "skip_task"])
async def process_task_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id not in user_states:
        await callback_query.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ /start")
        return

    state = user_states[user_id]

    if callback_query.data == "accept_task":
        if state["current_task"] is None:
            await callback_query.answer("–ù–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
            return
        if state["task_accepted"]:
            await callback_query.answer("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ.")
            return
        state["task_accepted"] = True
        await callback_query.message.edit_reply_markup(active_task_keyboard())
        await callback_query.answer("–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –£–¥–∞—á—ñ :)")

    elif callback_query.data == "decline_task":
        if state["current_task"] is None:
            await callback_query.answer("–ù–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
            return
        state["current_task"] = None
        state["current_level"] = None
        state["task_accepted"] = False
        await callback_query.message.edit_text("–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è' —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—à–µ.")
        await callback_query.answer()

    elif callback_query.data == "complete_task":
        if not state["task_accepted"]:
            await callback_query.answer("–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏–π–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
            return
        points = points_map[state["current_level"]]
        state["score"] += points
        state["skips"] = 0
        state["used"].add(state["current_task"])
        state["current_task"] = None
        state["current_level"] = None
        state["task_accepted"] = False
        await callback_query.message.edit_text(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! +{points} –±–∞–ª—ñ–≤.\n–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {state['score']} –±–∞–ª—ñ–≤.")
        await callback_query.answer()

    elif callback_query.data == "skip_task":
        if not state["task_accepted"]:
            await callback_query.answer("–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏–π–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
            return
        state["skips"] += 1
        state["used"].add(state["current_task"])
        state["current_task"] = None
        state["current_level"] = None
        state["task_accepted"] = False
        if state["skips"] > 2:
            state["score"] -= 1
            state["skips"] = 0
            await callback_query.message.edit_text("–¢—Ä–µ—Ç—ñ–π –ø—Ä–æ–ø—É—Å–∫ –ø—ñ–¥—Ä—è–¥ ‚Äî –º—ñ–Ω—É—Å 1 –±–∞–ª.")
        else:
            await callback_query.message.edit_text(f"–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ —à—Ç—Ä–∞—Ñ—É ({state['skips']} –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ–¥—Ä—è–¥).")
        await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
