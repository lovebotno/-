import logging
import random
import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from tasks import tasks  # —Ç–≤—ñ–π —Ñ–∞–π–ª –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏, —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ä—ñ–≤–Ω—è–º–∏

API_TOKEN = '7470253170:AAHX7NqY3L3H4pdCXVeDPsMXPvz8DM0_L70'  # —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∏

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_states = {}  # —ñ–Ω—Ñ–æ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
awaiting_partner_id = set()  # —Ö—Ç–æ –≤–≤–æ–¥–∏—Ç—å id –ø–∞—Ä—Ç–Ω–µ—Ä–∞
game_sessions = {}  # –∫–ª—é—á = tuple(user1,user2), –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî —Å–µ—Å—ñ—è –≥—Ä–∏


points_map = {
    "easy": 1,
    "medium": 2,
    "hard": 3,
    "bonus": 5
}

# –¢–µ—Ä–º—ñ–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑–∞ —Ä—ñ–≤–Ω—è–º–∏
deadlines = {
    "easy": datetime.timedelta(hours=6),
    "medium": datetime.timedelta(hours=12),
    "hard": datetime.timedelta(days=7),
    "bonus": datetime.timedelta(days=7)
}

def used_tasks_for_session(user1, user2):
    used1 = user_states.get(user1, {}).get("used", set())
    used2 = user_states.get(user2, {}).get("used", set())
    return used1.union(used2)

def get_new_task_for_user(user_id):
    partner_id = user_states[user_id].get("partner_id")
    if not partner_id:
        return None, None, None
    used = used_tasks_for_session(user_id, partner_id)
    levels = list(tasks.keys())
    random.shuffle(levels)
    for level in levels:
        available = [t for t in tasks[level] if t not in used]
        if available:
            task = random.choice(available)
            user_states[user_id]["used"].add(task)
            # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞—Ç—É –π —á–∞—Å –≤–∏–¥–∞—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
            user_states[user_id]["current_task"] = task
            user_states[user_id]["current_level"] = level
            user_states[user_id]["task_assigned_time"] = datetime.datetime.now()
            user_states[user_id]["skips"] = 0
            return task, level, deadlines[level]
    return None, None, None

def get_session_key(user1, user2):
    return tuple(sorted([user1, user2]))

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = {
            "score": 0,
            "used": set(),
            "skips": 0,
            "current_task": None,
            "current_level": None,
            "task_assigned_time": None,
            "partner_id": None,
            "partner_requests": set()
        }
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"))
    kb.add(KeyboardButton("–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"))
    kb.add(KeyboardButton("–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    kb.add(KeyboardButton("–í–∏–∫–æ–Ω–∞–Ω–æ"))
    kb.add(KeyboardButton("–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫"))
    kb.add(KeyboardButton("–†–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"))
    kb.add(KeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö"))
    kb.add(KeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É"))
    await message.answer(
        "–í—ñ—Ç–∞—é! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        "1) –ó–∞–ø—Ä–æ—Å–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —â–æ–± –≥—Ä–∞—Ç–∏ —Ä–∞–∑–æ–º.\n"
        "2) –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–π–º–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω–∏ '–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä–∏.", reply_markup=kb)

@dp.message_handler(lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def request_partner(message: types.Message):
    user_id = message.from_user.id
    awaiting_partner_id.add(user_id)
    await message.answer("–í–≤–µ–¥–∏ user_id –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—á–∏—Å–ª–∞). –í—ñ–Ω –º–∞—î –±—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –±–æ—Ç—ñ.")

@dp.message_handler()
async def generic_handler(message: types.Message):
    user_id = message.from_user.id

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–∞–∑ –≤–≤–æ–¥–∏—Ç—å user_id –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    if user_id in awaiting_partner_id:
        partner_text = message.text.strip()
        if not partner_text.isdigit():
            await message.answer("–í–≤–µ–¥–∏ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ–≤–∏–π user_id –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
            return
        partner_id = int(partner_text)
        if partner_id == user_id:
            await message.answer("–¢–∏ –Ω–µ –º–æ–∂–µ—à –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ. –í–≤–µ–¥–∏ —ñ–Ω—à–∏–π user_id.")
            return
        if partner_id not in user_states:
            await message.answer("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ù–µ—Ö–∞–π –≤—ñ–Ω –Ω–∞–ø–∏—à–µ /start.")
            return
        # –ó–∞–ø–∏—Å—É—î–º–æ –∑–∞–ø–∏—Ç
        user_states[partner_id]["partner_requests"].add(user_id)
        awaiting_partner_id.remove(user_id)
        await message.answer(f"–ó–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {partner_id}. –û—á—ñ–∫—É–π, –ø–æ–∫–∏ –≤—ñ–Ω –ø—Ä–∏–π–º–µ.")
        try:
            await bot.send_message(partner_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—Ä–æ—Å–∏–≤ —Ç–µ–±–µ –≤ –≥—Ä—É. –í—ñ–¥–ø–æ–≤—ñ—Å–∏ '–ø—Ä–∏–π–Ω—è—Ç–∏ {user_id}' –∞–±–æ '–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ {user_id}'.")
        except Exception:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä—É. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")
        return

    text = message.text.lower()

    # –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø–∏—Ç
    if text.startswith("–ø—Ä–∏–π–Ω—è—Ç–∏"):
        parts = text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            await message.answer("–©–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏, –≤–≤–µ–¥–∏: '–ø—Ä–∏–π–Ω—è—Ç–∏ <user_id>'")
            return
        requester_id = int(parts[1])
        if requester_id not in user_states or user_id not in user_states[requester_id]["partner_requests"]:
            await message.answer("–ù–µ–º–∞—î –∑–∞–ø–∏—Ç—É –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ
        user_states[user_id]["partner_id"] = requester_id
        user_states[requester_id]["partner_id"] = user_id
        user_states[requester_id]["partner_requests"].remove(user_id)
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Å—ñ—é –≥—Ä–∏
        session_key = get_session_key(user_id, requester_id)
        game_sessions[session_key] = {"players": session_key}
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–ø—É—Å–∫–∏ —ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        user_states[user_id]["skips"] = 0
        user_states[requester_id]["skips"] = 0
        user_states[user_id]["used"].clear()
        user_states[requester_id]["used"].clear()
        await message.answer(f"–í–∏ —Å—Ç–∞–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {requester_id}! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.")
        try:
            await bot.send_message(requester_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—Ä–∏–π–Ω—è–≤ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç. –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.")
        except Exception:
            pass
        return

    # –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç
    if text.startswith("–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏"):
        parts = text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            await message.answer("–©–æ–± –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏, –≤–≤–µ–¥–∏: '–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ <user_id>'")
            return
        requester_id = int(parts[1])
        if requester_id not in user_states or user_id not in user_states[requester_id]["partner_requests"]:
            await message.answer("–ù–µ–º–∞—î –∑–∞–ø–∏—Ç—É –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return
        user_states[requester_id]["partner_requests"].remove(user_id)
        await message.answer(f"–í—ñ–¥—Ö–∏–ª–∏–ª–∏ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {requester_id}.")
        try:
            await bot.send_message(requester_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤—ñ–¥—Ö–∏–ª–∏–≤ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç.")
        except Exception:
            pass
        return

    # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö —ñ–≥—Ä–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
    await handle_game_messages(message)

async def handle_game_messages(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ /start")
        return

    partner_id = user_states[user_id].get("partner_id")
    if not partner_id:
        await message.answer("–í —Ç–µ–±–µ –Ω–µ–º–∞—î –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ó–∞–ø—Ä–æ—Å–∏ –π–æ–≥–æ –∞–±–æ –ø—Ä–∏–π–º–∏ –∑–∞–ø–∏—Ç.")
        return

    text = message.text.lower()

    if text == "–ø–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º":
        await message.answer("–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    if text == "–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è":
        task, level, deadline = get_new_task_for_user(user_id)
        if task is None:
            await message.answer("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ–±–æ–º–∞ –≥—Ä–∞–≤—Ü—è–º–∏! –í—ñ—Ç–∞—î–º–æ üéâ")
            return
        deadline_str = f"–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {deadline}"
        user_states[user_id]["task_assigned_time"] = datetime.datetime.now()
        await message.answer(f"–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ({level} —Ä—ñ–≤–µ–Ω—å, {points_map[level]} –±–∞–ª—ñ–≤):\n\n{task}\n\n{deadline_str}")
        return

    if text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_states[user_id]["skips"] += 1
        if user_states[user_id]["skips"] > 2:
            user_states[user_id]["score"] -= 1
            user_states[user_id]["skips"] = 0
            await message.answer("–¢—Ä–µ—Ç—ñ–π –ø—Ä–æ–ø—É—Å–∫ –ø—ñ–¥—Ä—è–¥ ‚Äî –º—ñ–Ω—É—Å 1 –±–∞–ª.")
        else:
            await message.answer(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –±–µ–∑ —à—Ç—Ä–∞—Ñ—É ({user_states[user_id]['skips']} –ø—Ä–æ–ø—É—Å–∫–∏).")
        # –û—á–∏—â—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        user_states[user_id]["current_task"] = None
        user_states[user_id]["current_level"] = None
        user_states[user_id]["task_assigned_time"] = None
        return

    if text == "–≤–∏–∫–æ–Ω–∞–Ω–æ":
        if not user_states[user_id]["current_task"]:
            await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è'.")
            return
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        assigned_time = user_states[user_id].get("task_assigned_time")
        level = user_states[user_id].get("current_level")
        deadline = deadlines.get(level, datetime.timedelta(hours=6))
        now = datetime.datetime.now()
        if assigned_time and now - assigned_time > deadline:
            await message.answer(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –º–∏–Ω—É–≤ (—Ç–µ—Ä–º—ñ–Ω: {deadline}). –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –±—É–¥—å —É–≤–∞–∂–Ω—ñ—à–∏–º.")
            # –û—á–∏—â–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            user_states[user_id]["current_task"] = None
            user_states[user_id]["current_level"] = None
            user_states[user_id]["task_assigned_time"] = None
            return
        points = points_map[level]
        user_states[user_id]["score"] += points
        user_states[user_id]["skips"] = 0
        user_states[user_id]["current_task"] = None
        user_states[user_id]["current_level"] = None
        user_states[user_id]["task_assigned_time"] = None
        await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! +{points} –±–∞–ª—ñ–≤.\n–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {user_states[user_id]['score']} –±–∞–ª—ñ–≤")
        return

    if text == "–º—ñ–π —Ä–∞—Ö—É–Ω–æ–∫":
        score = user_states[user_id]["score"]
        await message.answer(f"–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤")
        return

    if text == "—Ä–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞":
        partner_id = user_states[user_id].get("partner_id")
        if not partner_id:
            await message.answer("–í —Ç–µ–±–µ –Ω–µ–º–∞—î –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
            return
        score = user_states.get(partner_id, {}).get("score", 0)
        await message.answer(f"–†–∞—Ö—É–Ω–æ–∫ —Ç–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {score} –±–∞–ª—ñ–≤")
        return

    if text == "—Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö":
        done = user_states[user_id].get("used", set())
        if not done:
            await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        else:
            await message.answer("–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n" + "\n".join(done))
        return

    if text == "–∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É":
        partner_id = user_states[user_id].get("partner_id")
        if partner_id:
            user_states[partner_id]["partner_id"] = None
       
