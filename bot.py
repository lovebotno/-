import logging
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from tasks import tasks  # —Ñ–∞–π–ª –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏

API_TOKEN = '7470253170:AAHX7NqY3L3H4pdCXVeDPsMXPvz8DM0_L70'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ë–∞–ª–∏ –∑–∞ —Ä—ñ–≤–µ–Ω—å
points_map = {
    "easy": 1,
    "medium": 2,
    "hard": 3,
    "bonus": 5
}

# –°–µ—Å—ñ—ó –≥—Ä–∏: key - chat_id –∞–±–æ —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞, value - dict –∑ –¥–≤–æ–º–∞ –≥—Ä–∞–≤—Ü—è–º–∏ (user_ids)
game_sessions = {}

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ user_states[user_id] = {
#   'score': int,
#   'used': set(),
#   'skips': int,
#   'current_task': str or None,
#   'current_level': str or None,
#   'deadline': datetime or None,
#   'partner_id': int or None
# }

def get_new_task(user_id):
    used = user_states[user_id]["used"]
    level = random.choice(list(tasks.keys()))
    available = [t for t in tasks[level] if t not in used]
    if not available:
        for lvl in tasks.keys():
            available = [t for t in tasks[lvl] if t not in used]
            if available:
                level = lvl
                break
    if not available:
        return None, None
    task = random.choice(available)
    user_states[user_id]["used"].add(task)
    return task, level

def get_deadline_by_level(level):
    if level == "hard":
        return datetime.now() + timedelta(days=7)
    else:
        return datetime.now() + timedelta(days=1)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {
        "score": 0,
        "used": set(),
        "skips": 0,
        "current_task": None,
        "current_level": None,
        "deadline": None,
        "partner_id": None,
    }
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"))
    kb.add(KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"))
    kb.add(KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ"))
    kb.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    kb.add(KeyboardButton("–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫"))
    kb.add(KeyboardButton("–†–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"))
    kb.add(KeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É"))
    await message.answer(
        "–í—ñ—Ç–∞—é! –©–æ–± –≥—Ä–∞—Ç–∏ –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –Ω–∞—Ç–∏—Å–Ω–∏ '–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'. "
        "–Ü–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä–æ—é.",
        reply_markup=kb
    )

@dp.message_handler(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º")
async def start_game_with_partner(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–í–≤–µ–¥–∏ Telegram user ID –∞–±–æ username –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–±–µ–∑ @):")

    # –ß–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    @dp.message_handler()
    async def set_partner(msg: types.Message):
        partner_id = None
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –∞–π–¥—ñ, —è–∫—â–æ —Ü–µ —á–∏—Å–ª–æ
        if msg.text.isdigit():
            partner_id = int(msg.text)
        else:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ username, —Ü–µ —Å–∫–ª–∞–¥–Ω—ñ—à–µ —ñ –≤–∏–º–∞–≥–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
            await msg.answer("–ü–æ–∫–∏ –≤–≤–µ–¥—ñ—Ç—å user_id —Ü–∏—Ñ—Ä–∞–º–∏.")
            return

        if partner_id == user_id:
            await msg.answer("–¢–∏ –Ω–µ –º–æ–∂–µ—à –≥—Ä–∞—Ç–∏ –∑ —Å–∞–º–∏–º —Å–æ–±–æ—é, –≤–≤–µ–¥–∏ —ñ–Ω—à–∏–π user ID.")
            return

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —è–∫—â–æ –Ω–µ–º–∞—î
        if partner_id not in user_states:
            user_states[partner_id] = {
                "score": 0,
                "used": set(),
                "skips": 0,
                "current_task": None,
                "current_level": None,
                "deadline": None,
                "partner_id": user_id
            }
        else:
            user_states[partner_id]["partner_id"] = user_id

        user_states[user_id]["partner_id"] = partner_id

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é, key - tuple –¥–≤–æ—Ö user_id (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å–µ—Å—ñ—ó)
        session_key = tuple(sorted([user_id, partner_id]))
        game_sessions[session_key] = {"players": session_key}

        await msg.answer(f"–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {partner_id}. –¢–µ–ø–µ—Ä –Ω–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è' –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.")

        # –í–∏–¥–∞–ª—è—î–º–æ —Ü–µ–π handler –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞–≤ –≤—Å—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        dp.message_handlers.unregister(set_partner)

@dp.message_handler(lambda message: message.text == "–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
async def new_task_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id]["partner_id"] is None:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥–æ—é '–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.")
        return

    task, level = get_new_task(user_id)
    if task is None:
        await message.answer("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ! –í—ñ—Ç–∞—î–º–æ üéâ")
        return
    deadline = get_deadline_by_level(level)
    user_states[user_id]["current_task"] = task
    user_states[user_id]["current_level"] = level
    user_states[user_id]["deadline"] = deadline
    user_states[user_id]["skips"] = 0

    await message.answer(
        f"–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ({level} —Ä—ñ–≤–µ–Ω—å, {points_map[level]} –±–∞–ª—ñ–≤):\n\n{task}\n\n"
        f"–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –¥–æ {deadline.strftime('%d-%m-%Y %H:%M')}\n"
        "–©–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'."
    )

@dp.message_handler(lambda message: message.text == "–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
async def accept_task_handler(message: types.Message):
    user_id = message.from_user.id
    if not user_states[user_id].get("current_task"):
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è. –ù–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è'.")
        return
    await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ:\n{user_states[user_id]['current_task']}")

@dp.message_handler(lambda message: message.text == "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
async def task_done_handler(message: types.Message):
    user_id = message.from_user.id
    if not user_states[user_id].get("current_task"):
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    level = user_states[user_id]["current_level"]
    points = points_map[level]
    user_states[user_id]["score"] += points
    user_states[user_id]["current_task"] = None
    user_states[user_id]["current_level"] = None
    user_states[user_id]["deadline"] = None
    user_states[user_id]["skips"] = 0

    await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ {points} –±–∞–ª—ñ–≤.\n–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {user_states[user_id]['score']}")

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def skip_task_handler(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id]["skips"] += 1
    if user_states[user_id]["skips"] > 2:
        user_states[user_id]["score"] -= 1
        user_states[user_id]["skips"] = 0
        await message.answer("–¢—Ä–µ—Ç—ñ–π –ø—Ä–æ–ø—É—Å–∫ –ø—ñ–¥—Ä—è–¥ ‚Äî –º—ñ–Ω—É—Å 1 –±–∞–ª.")
    else:
        await message.answer(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –±–µ–∑ —à—Ç—Ä–∞—Ñ—É ({user_states[user_id]['skips']} –ø—Ä–æ–ø—É—Å–∫–∏).")
    # –ó–Ω—ñ–º–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –±–æ –≤–æ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–µ
    user_states[user_id]["current_task"] = None
    user_states[user_id]["current_level"] = None
    user_states[user_id]["deadline"] = None

@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è")
async def view_my_task(message: types.Message):
    user_id = message.from_user.id
    task = user_states[user_id].get("current_task")
    deadline = user_states[user_id].get("deadline")
    if task:
        await message.answer(f"–¢–≤–æ—î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è:\n{task}\n–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ {deadline.strftime('%d-%m-%Y %H:%M')}")
    else:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")

@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def view_partner_task(message: types.Message):
    user_id = message.from_user.id
    partner_id = user_states[user_id].get("partner_id")
    if not partner_id or partner_id not in user_states:
        await message.answer("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return
    task = user_states[partner_id].get("current_task")
    if task:
        await message.answer("–ü–∞—Ä—Ç–Ω–µ—Ä –º–∞—î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è.")
    else:
        await message.answer("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")

@dp.message_handler(lambda message: message.text == "–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫")
async def my_score(message: types.Message):
    user_id = message.from_user.id
    score = user_states[user_id]["score"]
    await message.answer(f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤")

@dp.message_handler(lambda message: message.text == "–†–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def partner_score(message: types.Message):
    user_id = message.from_user.id
    partner_id = user_states[user_id].get("partner_id")
    if not partner_id or partner_id not in user_states:
        await message.answer("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return
    score = user_states[partner_id]["score"]
    await message.answer(f"–†–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {score} –±–∞–ª—ñ–≤")

@dp.message_handler(lambda message: message.text == "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É")
async def end_game(message: types.Message):
    user_id = message.from_user.id
    partner_id = user_states[user_id].get("partner_id")

    if partner_id and partner_id in user_states:
        user_states[partner_id]["partner_id"] = None

    if user_id in user_states:
        del user_states[user_id]

    await message.answer("–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –≤–≤–µ–¥–∏ /start.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
