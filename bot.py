import logging
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from tasks import tasks  # –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–¥–∞–Ω—å –∑ tasks.py

API_TOKEN = '7470253170:AAHX7NqY3L3H4pdCXVeDPsMXPvz8DM0_L70'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: score, used tasks, skips
user_states = {}

# –ë–∞–ª–∏ –∑–∞ —Ä—ñ–≤–µ–Ω—å
points_map = {
    "easy": 1,
    "medium": 2,
    "hard": 3,
    "bonus": 5
}

def get_new_task(user_id):
    used = user_states[user_id]["used"]
    level = random.choice(list(tasks.keys()))
    available = [t for t in tasks[level] if t not in used]
    if not available:
        # –®—É–∫–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ä—ñ–≤–Ω—è—Ö, —è–∫—â–æ –Ω–∞ –≤–∏–±—Ä–∞–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ –Ω–µ–º–∞—î
        for lvl in tasks.keys():
            available = [t for t in tasks[lvl] if t not in used]
            if available:
                level = lvl
                break
    if not available:
        return None, None
    task = random.choice(available)
    user_states[user_id]["used"].add(task)
    return task, level

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {
        "score": 0,
        "used": set(),
        "skips": 0,
        "consecutive_skips": 0
    }
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("–í–∏–∫–æ–Ω–∞–Ω–æ"))
    kb.add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    kb.add(KeyboardButton("–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫"))
    kb.add(KeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö"))
    kb.add(KeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É"))
    await message.answer("–í—ñ—Ç–∞—é –≤ Sex Bingo! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è', —â–æ–± –ø–æ—á–∞—Ç–∏.", reply_markup=kb)

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ /start")
        return

    text = message.text.lower()

    if text == "–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è":
        # –ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—î–º–æ, –∞–ª–µ –Ω–µ —Å—Ç–∞–≤–∏–º–æ –≤ –∞–∫—Ç–∏–≤–Ω—ñ, –ø–æ–∫–∏ –Ω–µ –ø—Ä–∏–π–Ω—è–ª–∏
        task, level = get_new_task(user_id)
        if task is None:
            await message.answer("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ! –í—ñ—Ç–∞—î–º–æ üéâ")
            return
        user_states[user_id]["proposed_task"] = (task, level)
        points = points_map[level]
        await message.answer(f"–ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Ç–æ–±—ñ –∑–∞–≤–¥–∞–Ω–Ω—è ({level} —Ä—ñ–≤–µ–Ω—å, {points} –±–∞–ª—ñ–≤):\n\n{task}\n\n–ù–∞—Ç–∏—Å–Ω–∏ '–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è' —â–æ–± –π–æ–≥–æ –≤–∑—è—Ç–∏ –∞–±–æ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' —â–æ–± –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å.")

    elif text == "–ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
        if "proposed_task" not in user_states[user_id]:
            await message.answer("–ù–µ–º–∞—î –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è' –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è.")
            return
        task, level = user_states[user_id]["proposed_task"]
        user_states[user_id]["current_task"] = task
        user_states[user_id]["current_level"] = level
        user_states[user_id]["skips"] = 0
        user_states[user_id]["proposed_task"] = None
        await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ:\n\n{task}\n\n–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ '–í–∏–∫–æ–Ω–∞–Ω–æ'.")

    elif text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        # –ü—Ä–æ–ø—É—Å–∫ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        if "proposed_task" in user_states[user_id] and user_states[user_id]["proposed_task"]:
            user_states[user_id]["proposed_task"] = None
        user_states[user_id]["consecutive_skips"] += 1
        if user_states[user_id]["consecutive_skips"] > 2:
            user_states[user_id]["score"] -= 1
            user_states[user_id]["consecutive_skips"] = 0
            await message.answer("–¢—Ä–µ—Ç—ñ–π –ø—Ä–æ–ø—É—Å–∫ –ø—ñ–¥—Ä—è–¥ ‚Äî –º—ñ–Ω—É—Å 1 –±–∞–ª.")
        else:
            await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ —à—Ç—Ä–∞—Ñ—É ({user_states[user_id]['consecutive_skips']} –ø—Ä–æ–ø—É—Å–∫–∏ –ø—ñ–¥—Ä—è–¥).")

    elif text == "–≤–∏–∫–æ–Ω–∞–Ω–æ":
        if "current_task" not in user_states[user_id]:
            await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è'.")
            return
        level = user_states[user_id]["current_level"]
        points = points_map[level]
        user_states[user_id]["score"] += points
        user_states[user_id]["skips"] = 0
        user_states[user_id]["consecutive_skips"] = 0
        # –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚Äî –≤–æ–Ω–æ –≤–∂–µ –¥–æ–¥–∞–Ω–æ –≤ used –ø—ñ–¥ —á–∞—Å get_new_task
        user_states[user_id].pop("current_task")
        user_states[user_id].pop("current_level")
        await message.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! +{points} –±–∞–ª—ñ–≤.\n–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {user_states[user_id]['score']} –±–∞–ª—ñ–≤")

    elif text == "–º—ñ–π —Ä–∞—Ö—É–Ω–æ–∫":
        score = user_states[user_id]["score"]
        await message.answer(f"–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤")

    elif text == "—Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö":
        done = user_states[user_id]["used"]
        if not done:
            await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        else:
            await message.answer("–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n" + "\n".join(done))

    elif text == "–∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥—Ä—É":
        score = user_states[user_id]["score"]
        await message.answer(f"–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–≤—ñ–π –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {score} –±–∞–ª—ñ–≤.\n–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –≤–≤–µ–¥–∏ /start")
        del user_states[user_id]

    else:
        await message.answer("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –∞–±–æ –≤–≤–µ–¥–∏ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

